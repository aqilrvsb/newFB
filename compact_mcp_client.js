// Compact MCP client with all 13 tools for Claude Desktop
const https=require('https');const USER_ID='YOUR_USER_ID_HERE';let buffer='';const tools=[{name:'get_ad_accounts',description:'Get all available Facebook ad accounts',inputSchema:{type:'object',properties:{}}},{name:'select_ad_account',description:'Select a Facebook ad account to use',inputSchema:{type:'object',properties:{accountId:{type:'string',description:'Facebook Ad Account ID'}},required:['accountId']}},{name:'create_campaign',description:'Creates a new ad campaign',inputSchema:{type:'object',properties:{name:{type:'string'},objective:{type:'string'},status:{type:'string'},dailyBudget:{type:'string'},startTime:{type:'string'},endTime:{type:'string'},special_ad_categories:{type:'array',items:{type:'string'}}},required:['name','objective','status','special_ad_categories']}},{name:'get_campaigns',description:'Lists existing campaigns',inputSchema:{type:'object',properties:{limit:{type:'string'},status:{type:'string'}}}},{name:'get_campaign_details',description:'Gets details for a specific campaign',inputSchema:{type:'object',properties:{campaignId:{type:'string'}},required:['campaignId']}},{name:'update_campaign',description:'Updates an existing campaign',inputSchema:{type:'object',properties:{campaignId:{type:'string'},name:{type:'string'},status:{type:'string'},dailyBudget:{type:'string'},endTime:{type:'string'}},required:['campaignId']}},{name:'delete_campaign',description:'Deletes a campaign',inputSchema:{type:'object',properties:{campaignId:{type:'string'}},required:['campaignId']}},{name:'create_custom_audience',description:'Creates a custom, website, or engagement audience',inputSchema:{type:'object',properties:{name:{type:'string'},subtype:{type:'string'},description:{type:'string'},customer_file_source:{type:'string'},rule:{type:'object'}},required:['name','subtype']}},{name:'get_audiences',description:'Lists available custom audiences',inputSchema:{type:'object',properties:{limit:{type:'string'}}}},{name:'create_lookalike_audience',description:'Creates a lookalike audience',inputSchema:{type:'object',properties:{sourceAudienceId:{type:'string'},name:{type:'string'},description:{type:'string'},country:{type:'string'},ratio:{type:'number'}},required:['sourceAudienceId','name','country']}},{name:'create_ad_set',description:'Creates a new ad set',inputSchema:{type:'object',properties:{campaignId:{type:'string'},name:{type:'string'},status:{type:'string'},targeting:{type:'object'},optimizationGoal:{type:'string'},billingEvent:{type:'string'},bidAmount:{type:'number'},dailyBudget:{type:'number'},lifetimeBudget:{type:'number'}},required:['campaignId','name','status','targeting','optimizationGoal','billingEvent']}},{name:'get_campaign_insights',description:'Retrieves performance insights for a campaign',inputSchema:{type:'object',properties:{campaignId:{type:'string'},since:{type:'string'},until:{type:'string'},metrics:{type:'string'}},required:['campaignId','since','until']}},{name:'generate_campaign_prompt',description:'Generates a prompt for campaign creation using a template',inputSchema:{type:'object',properties:{templateName:{type:'string'},variables:{type:'object'}},required:['templateName','variables']}}];async function processMessage(m){let r;if(m.method==='initialize'){r={jsonrpc:'2.0',id:m.id,result:{protocolVersion:'2024-11-05',capabilities:{tools:{}},serverInfo:{name:'dynamic-facebook-ads',version:'2.0.0'}}}}else if(m.method==='notifications/initialized'||m.method==='notifications/cancelled'){return}else if(m.method==='tools/list'){r={jsonrpc:'2.0',id:m.id,result:{tools}}}else if(m.method==='resources/list'){r={jsonrpc:'2.0',id:m.id,result:{resources:[]}}}else if(m.method==='prompts/list'){r={jsonrpc:'2.0',id:m.id,result:{prompts:[]}}}else if(m.method==='tools/call'){try{const req=https.request({hostname:'newfb-production.up.railway.app',port:443,path:`/mcp/${USER_ID}`,method:'POST',headers:{'Content-Type':'application/json'}},res=>{let data='';res.on('data',chunk=>data+=chunk);res.on('end',()=>{try{const result=JSON.parse(data);console.log(JSON.stringify({jsonrpc:'2.0',id:m.id,result:{content:[{type:'text',text:JSON.stringify(result,null,2)}]}}))}catch(e){console.log(JSON.stringify({jsonrpc:'2.0',id:m.id,error:{code:-1,message:e.message}}))}})});req.write(JSON.stringify({method:m.params.name,params:m.params.arguments}));req.end();return}catch(e){r={jsonrpc:'2.0',id:m.id,error:{code:-1,message:e.message}}}}else{r={jsonrpc:'2.0',id:m.id,error:{code:-32601,message:'Method not found'}}}if(r)console.log(JSON.stringify(r))}process.stdin.on('data',async data=>{buffer+=data.toString();const lines=buffer.split('\n');buffer=lines.pop()||'';for(const line of lines){if(line.trim()){try{await processMessage(JSON.parse(line.trim()))}catch(e){console.error('Parse error:',e)}}}});process.stdin.on('end',()=>process.exit(0));console.error('MCP Client started for user:',USER_ID);