// Manual fix for missing tools in compressed line
const fs = require('fs');
const path = require('path');

console.log('ðŸ”§ Manually fixing missing tools in /get-user-id...');

const filePath = path.join(__dirname, 'src', 'http-server.ts');
let content = fs.readFileSync(filePath, 'utf8');

// Find the exact end of the current tools list and add missing tools
const toolsEndPattern = /\{ name: 'get_page_fan_count', description: 'Get the total fan\/follower count for a page', inputSchema: \{ type: 'object', properties: \{ pageId: \{ type: 'string' \} \}, required: \['pageId'\] \} \} \]/;

// Missing tools that need to be added
const missingTools = `{ name: 'get_page_fan_count', description: 'Get the total fan/follower count for a page', inputSchema: { type: 'object', properties: { pageId: { type: 'string' } }, required: ['pageId'] } }, { name: 'reply_to_comment', description: 'Reply to a specific comment on a post', inputSchema: { type: 'object', properties: { commentId: { type: 'string' }, message: { type: 'string' } }, required: ['commentId', 'message'] } }, { name: 'get_post_comments', description: 'Fetch comments on a given post', inputSchema: { type: 'object', properties: { postId: { type: 'string' }, limit: { type: 'number', default: 25 } }, required: ['postId'] } }, { name: 'delete_comment', description: 'Delete a specific comment by ID', inputSchema: { type: 'object', properties: { commentId: { type: 'string' } }, required: ['commentId'] } }, { name: 'delete_comment_from_post', description: 'Alias for deleting a comment from a specific post', inputSchema: { type: 'object', properties: { commentId: { type: 'string' } }, required: ['commentId'] } }, { name: 'filter_negative_comments', description: 'Filter out comments with negative sentiment keywords', inputSchema: { type: 'object', properties: { postId: { type: 'string' }, keywords: { type: 'array', items: { type: 'string' } } }, required: ['postId'] } }, { name: 'get_number_of_comments', description: 'Count the number of comments on a post', inputSchema: { type: 'object', properties: { postId: { type: 'string' } }, required: ['postId'] } }, { name: 'get_number_of_likes', description: 'Count the number of likes on a post', inputSchema: { type: 'object', properties: { postId: { type: 'string' } }, required: ['postId'] } }, { name: 'get_post_impressions', description: 'Get total impressions on a post', inputSchema: { type: 'object', properties: { postId: { type: 'string' } }, required: ['postId'] } }, { name: 'get_post_impressions_unique', description: 'Get number of unique users who saw the post', inputSchema: { type: 'object', properties: { postId: { type: 'string' } }, required: ['postId'] } }, { name: 'get_post_impressions_paid', description: 'Get number of paid impressions on the post', inputSchema: { type: 'object', properties: { postId: { type: 'string' } }, required: ['postId'] } }, { name: 'get_post_impressions_organic', description: 'Get number of organic impressions on the post', inputSchema: { type: 'object', properties: { postId: { type: 'string' } }, required: ['postId'] } }, { name: 'get_post_engaged_users', description: 'Get number of users who engaged with the post', inputSchema: { type: 'object', properties: { postId: { type: 'string' } }, required: ['postId'] } }, { name: 'get_post_clicks', description: 'Get number of clicks on the post', inputSchema: { type: 'object', properties: { postId: { type: 'string' } }, required: ['postId'] } }, { name: 'get_post_reactions_like_total', description: 'Get total number of Like reactions', inputSchema: { type: 'object', properties: { postId: { type: 'string' } }, required: ['postId'] } }, { name: 'get_post_top_commenters', description: 'Get the top commenters on a post', inputSchema: { type: 'object', properties: { postId: { type: 'string' }, limit: { type: 'number', default: 10 } }, required: ['postId'] } }, { name: 'post_image_to_facebook', description: 'Post an image with a caption to the Facebook page', inputSchema: { type: 'object', properties: { pageId: { type: 'string' }, imageUrl: { type: 'string' }, caption: { type: 'string' } }, required: ['pageId', 'imageUrl'] } }, { name: 'get_post_share_count', description: 'Get the number of shares on a post', inputSchema: { type: 'object', properties: { postId: { type: 'string' } }, required: ['postId'] } }, { name: 'send_dm_to_user', description: 'Send a direct message to a user', inputSchema: { type: 'object', properties: { recipientId: { type: 'string' }, message: { type: 'string' } }, required: ['recipientId', 'message'] } } ]`;

// Replace the get_page_fan_count tool + closing bracket with get_page_fan_count + all missing tools + closing bracket
content = content.replace(toolsEndPattern, missingTools);

// Write back the file
fs.writeFileSync(filePath, content, 'utf8');

console.log('âœ… Manually added 18 missing tools to compressed tools list');
console.log('ðŸ“‹ Total tools should now be: 47 + 18 = 65 tools');
console.log('ðŸš€ All missing tools should now be visible in /get-user-id');
