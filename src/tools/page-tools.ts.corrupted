import { getAdAccountForUser } from '../config.js';

// Type definitions for API responses
interface FacebookApiResponse {
  error?: {
    message: string;
    code: number;
  };
  [key: string]: any;
}

// Helper function to get page access token
async function getPageAccessToken(userId: string, pageId: string): Promise<string | null> {
  try {
    const { userSessionManager } = await import('../config.js');
    const session = userSessionManager.getSession(userId);
    if (!session) return null;

    // Get page access token from stored pages or fetch it
    const pagesResult = await getUserFacebookPages(session.credentials.facebookAccessToken);
    if (pagesResult.success && pagesResult.pages) {
      const page = pagesResult.pages.find((p: any) => p.id === pageId);
      return page?.access_token || null;
    }
    return null;
  } catch (error) {
    return null;
  }
}

// Helper to get user's Facebook pages


async function getUserFacebookPages(accessToken: string): Promise<any> {
  try {
    const response = await fetch(
      `https://graph.facebook.com/v23.0/me/accounts?fields=id,name,access_token,category&access_token=${accessToken}`
    );
    const data: any = await response.json();
    
    if (data.error) {
      return { success: false, error: data.error.message };
    }
    
    return { success: true, pages: data.data || [] };
  } catch (error) {
    return { success: false, error: error instanceof Error ? error.message : 'Unknown error' };
  }
}

// Post to Facebook Page
export const postToFacebook = async (
  userId: string,
  pageId: string,
  message: string,
  link?: string,
  published?: boolean
) => {
  try {
    const pageAccessToken = await getPageAccessToken(userId, pageId);
    if (!pageAccessToken) {
      return { success: false, message: 'Failed to get page access token' };
    }

    const params: any = { message, access_token: pageAccessToken };
    if (link) params.link = link;
    if (published !== undefined) params.published = published;

    const response = await fetch(
      `https://graph.facebook.com/v23.0/${pageId}/feed`,
      {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(params)
      }
    );

    const result: any = await response.json();
    
    if (result.error) {
      return { success: false, message: result.error.message };
    }

    return {
      success: true,
      postId: result.id,
      message: 'Post created successfully'
    };
  } catch (error) {
    return {
      success: false,
      message: `Error posting to Facebook: ${error instanceof Error ? error.message : 'Unknown error'}`
    };
  }
};

// Reply to a comment
export const replyToComment = async (
  userId: string,
  commentId: string,
  message: string
) => {
  try {
    const { userSessionManager } = await import('../config.js');
    const session = userSessionManager.getSession(userId);
    if (!session) {
      throw new Error('User session not found');
    }

    const response = await fetch(
      `https://graph.facebook.com/v23.0/${commentId}/comments`,
      {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          message,
          access_token: session.credentials.facebookAccessToken
        })
      }
    );

    const result: any = await response.json();
    
    if (result.error) {
      return { success: false, message: result.error.message };
    }

    return {
      success: true,
      commentId: result.id,
      message: 'Reply posted successfully'
    };
  } catch (error) {
    return {
      success: false,
      message: `Error replying to comment: ${error instanceof Error ? error.message : 'Unknown error'}`
    };
  }
};

// Get page posts
export const getPagePosts = async (
  userId: string,
  pageId: string,
  limit: number = 25
) => {
  try {
    const pageAccessToken = await getPageAccessToken(userId, pageId);
    if (!pageAccessToken) {
      return { success: false, message: 'Failed to get page access token' };
    }

    const response = await fetch(
      `https://graph.facebook.com/v23.0/${pageId}/posts?fields=id,message,created_time,from,shares,reactions.summary(true),comments.summary(true)&limit=${limit}&access_token=${pageAccessToken}`
    );

    const result: any = await response.json();
    
    if (result.error) {
      return { success: false, message: result.error.message };
    }

    return {
      success: true,
      posts: result.data || [],
      paging: result.paging,
      message: `Retrieved ${result.data?.length || 0} posts`
    };
  } catch (error) {
    return {
      success: false,
      message: `Error getting page posts: ${error instanceof Error ? error.message : 'Unknown error'}`
    };
  }
};

// Get post comments
export const getPostComments = async (
  userId: string,
  postId: string,
  limit: number = 25
) => {
  try {
    const { userSessionManager } = await import('../config.js');
    const session = userSessionManager.getSession(userId);
    if (!session) {
      throw new Error('User session not found');
    }

    const response = await fetch(
      `https://graph.facebook.com/v23.0/${postId}/comments?fields=id,message,from,created_time,like_count,comment_count&limit=${limit}&access_token=${session.credentials.facebookAccessToken}`
    );

    const result: any = await response.json();
    
    if (result.error) {
      return { success: false, message: result.error.message };
    }

    return {
      success: true,
      comments: result.data || [],
      paging: result.paging,
      message: `Retrieved ${result.data?.length || 0} comments`
    };
  } catch (error) {
    return {
      success: false,
      message: `Error getting post comments: ${error instanceof Error ? error.message : 'Unknown error'}`
    };
  }
};

// Delete post
export const deletePost = async (userId: string, postId: string) => {
  try {
    const { userSessionManager } = await import('../config.js');
    const session = userSessionManager.getSession(userId);
    if (!session) {
      throw new Error('User session not found');
    }

    const response = await fetch(
      `https://graph.facebook.com/v23.0/${postId}?access_token=${session.credentials.facebookAccessToken}`,
      { method: 'DELETE' }
    );

    const result: any = await response.json();
    
    if (result.error) {
      return { success: false, message: result.error.message };
    }

    return {
      success: result.success || true,
      message: 'Post deleted successfully'
    };
  } catch (error) {
    return {
      success: false,
      message: `Error deleting post: ${error instanceof Error ? error.message : 'Unknown error'}`
    };
  }
};

// Delete comment
export const deleteComment = async (userId: string, commentId: string) => {
  try {
    const { userSessionManager } = await import('../config.js');
    const session = userSessionManager.getSession(userId);
    if (!session) {
      throw new Error('User session not found');
    }

    const response = await fetch(
      `https://graph.facebook.com/v23.0/${commentId}?access_token=${session.credentials.facebookAccessToken}`,
      { method: 'DELETE' }
    );

    const result: any = await response.json();
    
    if (result.error) {
      return { success: false, message: result.error.message };
    }

    return {
      success: result.success || true,
      message: 'Comment deleted successfully'
    };
  } catch (error) {
    return {
      success: false,
      message: `Error deleting comment: ${error instanceof Error ? error.message : 'Unknown error'}`
    };
  }
};

// Filter negative comments
export const filterNegativeComments = async (
  userId: string,
  postId: string,
  keywords: string[] = ['spam', 'scam', 'fake', 'hate', 'terrible', 'worst']
) => {
  try {
    const commentsResult = await getPostComments(userId, postId, 100);
    
    if (!commentsResult.success) {
      return commentsResult;
    }

    const negativeComments = commentsResult.comments.filter((comment: any) => {
      const lowerMessage = comment.message?.toLowerCase() || '';
      return keywords.some(keyword => lowerMessage.includes(keyword.toLowerCase()));
    });

    return {
      success: true,
      negativeComments,
      totalComments: commentsResult.comments.length,
      negativeCount: negativeComments.length,
      keywords: keywords,
      message: `Found ${negativeComments.length} negative comments out of ${commentsResult.comments.length} total`
    };
  } catch (error) {
    return {
      success: false,
      message: `Error filtering comments: ${error instanceof Error ? error.message : 'Unknown error'}`
    };
  }
};

// Get post metrics
export const getPostMetrics = async (userId: string, postId: string) => {
  try {
    const { userSessionManager } = await import('../config.js');
    const session = userSessionManager.getSession(userId);
    if (!session) {
      throw new Error('User session not found');
    }

    const response = await fetch(
      `https://graph.facebook.com/v23.0/${postId}?fields=reactions.summary(true),comments.summary(true),shares,insights.metric(post_impressions,post_impressions_unique,post_impressions_paid,post_impressions_organic,post_engaged_users,post_clicks)&access_token=${session.credentials.facebookAccessToken}`
    );

    const result: any = await response.json();
    
    if (result.error) {
      return { success: false, message: result.error.message };
    }

    // Extract insights data
    const insights: any = {};
    if (result.insights?.data) {
      result.insights.data.forEach((metric: any) => {
        insights[metric.name] = metric.values?.[0]?.value || 0;
      });
    }

    return {
      success: true,
      postId,
      metrics: {
        likes: result.reactions?.summary?.total_count || 0,
        comments: result.comments?.summary?.total_count || 0,
        shares: result.shares?.count || 0,
        impressions: insights.post_impressions || 0,
        impressionsUnique: insights.post_impressions_unique || 0,
        impressionsPaid: insights.post_impressions_paid || 0,
        impressionsOrganic: insights.post_impressions_organic || 0,
        engagedUsers: insights.post_engaged_users || 0,
        clicks: insights.post_clicks || 0
      },
      message: 'Post metrics retrieved successfully'
    };
  } catch (error) {
    return {
      success: false,
      message: `Error getting post metrics: ${error instanceof Error ? error.message : 'Unknown error'}`
    };
  }
};

// Post image to Facebook
export const postImageToFacebook = async (
  userId: string,
  pageId: string,
  imageUrl: string,
  caption?: string
) => {
  try {
    const pageAccessToken = await getPageAccessToken(userId, pageId);
    if (!pageAccessToken) {
      return { success: false, message: 'Failed to get page access token' };
    }

    const params: any = {
      url: imageUrl,
      access_token: pageAccessToken
    };
    if (caption) params.caption = caption;

    const response = await fetch(
      `https://graph.facebook.com/v23.0/${pageId}/photos`,
      {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(params)
      }
    );

    const result: any = await response.json();
    
    if (result.error) {
      return { success: false, message: result.error.message };
    }

    return {
      success: true,
      postId: result.post_id,
      photoId: result.id,
      message: 'Image posted successfully'
    };
  } catch (error) {
    return {
      success: false,
      message: `Error posting image: ${error instanceof Error ? error.message : 'Unknown error'}`
    };
  }
};

// Schedule post
export const schedulePost = async (
  userId: string,
  pageId: string,
  message: string,
  scheduledTime: number | string, // Unix timestamp or ISO string
  link?: string
) => {
  try {
    const pageAccessToken = await getPageAccessToken(userId, pageId);
    if (!pageAccessToken) {
      return { success: false, message: 'Failed to get page access token' };
    }

    // Handle Malaysia timezone (UTC+8) scheduling
    let timestamp: number;
    
    if (typeof scheduledTime === 'string') {
      // Check if it's already a Unix timestamp string
      if (/^\d{10}$/.test(scheduledTime)) {
        timestamp = parseInt(scheduledTime);
      } else {
        // Parse ISO string and convert to Unix timestamp
        const date = new Date(scheduledTime);
        timestamp = Math.floor(date.getTime() / 1000);
      }
    } else if (typeof scheduledTime === 'number') {
      timestamp = scheduledTime;
    } else {
      return {
        success: false,
        message: 'Invalid scheduledTime format. Use Unix timestamp (number) or ISO string'
      };
    }

    // Validate timestamp is in the future (at least 10 minutes from now)
    const now = Math.floor(Date.now() / 1000);
    const minFutureTime = now + (10 * 60); // 10 minutes from now
    const maxFutureTime = now + (6 * 30 * 24 * 60 * 60); // 6 months from now

    if (timestamp < minFutureTime) {
      return {
        success: false,
        message: `Scheduled time must be at least 10 minutes in the future. Minimum time: ${new Date(minFutureTime * 1000).toISOString()}`
      };
    }

    if (timestamp > maxFutureTime) {
      return {
        success: false,
        message: 'Scheduled time cannot be more than 6 months in the future'
      };
    }

    const params: any = {
      message,
      published: false,
      scheduled_publish_time: timestamp,
      access_token: pageAccessToken
    };
    if (link) params.link = link;

    console.log(`🇲🇾 Scheduling post for Malaysia timezone - Timestamp: ${timestamp}, Date: ${new Date(timestamp * 1000).toISOString()}`);

    const response = await fetch(
      `https://graph.facebook.com/v23.0/${pageId}/feed`,
      {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(params)
      }
    );

    const data: any = await response.json();
    if (data.error) {
      return { 
        success: false, 
        message: `Error scheduling post: ${data.error.message}`,
        error: data.error
      };
    }

    return {
      success: true,
      postId: data.id,
      scheduledTime: new Date(timestamp * 1000).toISOString(),
      scheduledTimestamp: timestamp,
      message: 'Post scheduled successfully',
      malaysiaTime: new Date(timestamp * 1000).toLocaleString('en-MY', { timeZone: 'Asia/Kuala_Lumpur' })
    };

  } catch (error: any) {
    return {
      success: false,
      message: `Error scheduling post: ${error.message}`
    };
  }
};

// Update post
export const updatePost = async (
  userId: string,
  postId: string,
  message: string
) => {
  try {
    const { userSessionManager } = await import('../config.js');
    const session = userSessionManager.getSession(userId);
    if (!session) {
      throw new Error('User session not found');
    }

    const response = await fetch(
      `https://graph.facebook.com/v23.0/${postId}`,
      {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          message,
          access_token: session.credentials.facebookAccessToken
        })
      }
    );

    const result: any = await response.json();
    
    if (result.error) {
      return { success: false, message: result.error.message };
    }

    return {
      success: result.success || true,
      message: 'Post updated successfully'
    };
  } catch (error) {
    return {
      success: false,
      message: `Error updating post: ${error instanceof Error ? error.message : 'Unknown error'}`
    };
  }
};

// Get page fan count
export const getPageFanCount = async (userId: string, pageId: string) => {
  try {
    const pageAccessToken = await getPageAccessToken(userId, pageId);
    if (!pageAccessToken) {
      return { success: false, message: 'Failed to get page access token' };
    }

    const response = await fetch(
      `https://graph.facebook.com/v23.0/${pageId}?fields=fan_count,name&access_token=${pageAccessToken}`
    );

    const result: any = await response.json();
    
    if (result.error) {
      return { success: false, message: result.error.message };
    }

    return {
      success: true,
      pageId,
      pageName: result.name,
      fanCount: result.fan_count || 0,
      message: `Page has ${result.fan_count || 0} fans`
    };
  } catch (error) {
    return {
      success: false,
      message: `Error getting fan count: ${error instanceof Error ? error.message : 'Unknown error'}`
    };
  }
};

// Get top commenters
export const getPostTopCommenters = async (
  userId: string,
  postId: string,
  limit: number = 10
) => {
  try {
    const commentsResult = await getPostComments(userId, postId, 100);
    
    if (!commentsResult.success) {
      return commentsResult;
    }

    // Count comments by user
    const commenterCounts: { [key: string]: { name: string; count: number; userId: string } } = {};
    
    commentsResult.comments.forEach((comment: any) => {
      const userId = comment.from?.id;
      const userName = comment.from?.name || 'Unknown User';
      
      if (userId) {
        if (!commenterCounts[userId]) {
          commenterCounts[userId] = { name: userName, count: 0, userId };
        }
        commenterCounts[userId].count++;
      }
    });

    // Sort by count and get top commenters
    const topCommenters = Object.values(commenterCounts)
      .sort((a, b) => b.count - a.count)
      .slice(0, limit);

    return {
      success: true,
      topCommenters,
      totalComments: commentsResult.comments.length,
      uniqueCommenters: Object.keys(commenterCounts).length,
      message: `Found ${topCommenters.length} top commenters`
    };
  } catch (error) {
    return {
      success: false,
      message: `Error getting top commenters: ${error instanceof Error ? error.message : 'Unknown error'}`
    };
  }
};

// Get scheduled posts for a page using page access token
export const getScheduledPosts = async (
  userId: string,
  pageId: string
) => {
  try {
    const pageAccessToken = await getPageAccessToken(userId, pageId);
    if (!pageAccessToken) {
      return { success: false, message: 'Failed to get page access token' };
    }

    console.log(`🔍 Getting scheduled posts for page: ${pageId} with page access token`);

    // Try the primary endpoint for scheduled posts with page token
    const response = await fetch(
      `https://graph.facebook.com/v23.0/${pageId}/promotable_posts?is_published=false&access_token=${pageAccessToken}`
    );
    const data: any = await response.json();
    
    if (data.error) {
      console.log('❌ Primary endpoint failed, trying alternative...');
      
      // Try alternative endpoint with page token  
      const altResponse = await fetch(
        `https://graph.facebook.com/v23.0/${pageId}/feed?fields=id,message,created_time,scheduled_publish_time&published=false&access_token=${pageAccessToken}`
      );
      const altData: any = await altResponse.json();
      
      if (altData.error) {
        // Try another alternative - published_posts with scheduled filter
        console.log('❌ Feed endpoint failed, trying published_posts...');
        const thirdResponse = await fetch(
          `https://graph.facebook.com/v23.0/${pageId}/published_posts?fields=id,message,created_time,scheduled_publish_time&is_published=false&access_token=${pageAccessToken}`
        );
        const thirdData: any = await thirdResponse.json();
        
        if (thirdData.error) {
          return {
            success: false,
            error: thirdData.error.message,
            details: {
              primaryError: data.error,
              alternativeError: altData.error,
              thirdError: thirdData.error,
              suggestion: 'This endpoint may require additional permissions or the page may not have any scheduled posts'
            }
          };
        }

        const scheduledPosts = (thirdData.data || []).filter((post: any) => 
          post.scheduled_publish_time && 
          new Date(post.scheduled_publish_time) > new Date()
        );

        return {
          success: true,
          scheduledPosts,
          totalScheduled: scheduledPosts.length,
          message: `Found ${scheduledPosts.length} scheduled posts (via published_posts endpoint)`,
          endpoint: 'published_posts'
        };
      }

      const scheduledPosts = (altData.data || []).filter((post: any) => 
        post.scheduled_publish_time && 
        new Date(post.scheduled_publish_time) > new Date()
      );

      return {
        success: true,
        scheduledPosts,
        totalScheduled: scheduledPosts.length,
        message: `Found ${scheduledPosts.length} scheduled posts (via feed endpoint)`,
        endpoint: 'feed_alternative'
      };
    }

    // Filter for actually scheduled posts from primary endpoint
    const scheduledPosts = (data.data || []).filter((post: any) => 
      post.scheduled_publish_time && 
      new Date(post.scheduled_publish_time) > new Date()
    );

    return {
      success: true,
      scheduledPosts,
      totalScheduled: scheduledPosts.length,
      message: `Found ${scheduledPosts.length} scheduled posts`,
      endpoint: 'promotable_posts'
    };

  } catch (error: any) {
    console.log('❌ getScheduledPosts error:', error.message);
    return {
      success: false,
      error: `Error retrieving scheduled posts: ${error.message}`,
      suggestion: 'Check if the page access token has the required permissions'
    };
  }
};

// Send DM to user (requires messaging permissions)
export const sendDmToUser = async (
  userId: string,
  recipientId: string,
  message: string
) => {
  try {
    const { userSessionManager } = await import('../config.js');
    const session = userSessionManager.getSession(userId);
    if (!session) {
      throw new Error('User session not found');
    }

    const response = await fetch(
      `https://graph.facebook.com/v23.0/me/messages`,
      {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          recipient: { id: recipientId },
          message: { text: message },
          access_token: session.credentials.facebookAccessToken
        })
      }
    );

    const result: any = await response.json();
    
    if (result.error) {
      return { success: false, message: result.error.message };
    }

    return {
      success: true,
      messageId: result.message_id,
      message: 'DM sent successfully'
    };
  } catch (error) {
    return {
      success: false,
      message: `Error sending DM: ${error instanceof Error ? error.message : 'Unknown error'}`
    };
  }
};

// Helper functions for specific metrics
export const getNumberOfComments = async (userId: string, postId: string) => {
  try {
    const commentsResult = await getPostComments(userId, postId, 1);
    if (!commentsResult.success) {
      return commentsResult;
    }

    // Get total count from the API response
    const { userSessionManager } = await import('../config.js');
    const session = userSessionManager.getSession(userId);
    if (!session) {
      throw new Error('User session not found');
    }

    const response = await fetch(
      `https://graph.facebook.com/v23.0/${postId}?fields=comments.summary(true)&access_token=${session.credentials.facebookAccessToken}`
    );
    const result: any = await response.json();
    
    return {
      success: true,
      postId,
      commentCount: result.comments?.summary?.total_count || 0,
      message: `Post has ${result.comments?.summary?.total_count || 0} comments`
    };
  } catch (error) {
    return {
      success: false,
      message: `Error getting comment count: ${error instanceof Error ? error.message : 'Unknown error'}`
    };
  }
};

export const getNumberOfLikes = async (userId: string, postId: string) => {
  try {
    const metricsResult = await getPostMetrics(userId, postId);
    if (!metricsResult.success) {
      return metricsResult;
    }

    return {
      success: true,
      postId,
      likeCount: metricsResult.metrics?.likes || 0,
      message: `Post has ${metricsResult.metrics?.likes || 0} likes`
    };
  } catch (error) {
    return {
      success: false,
      message: `Error getting like count: ${error instanceof Error ? error.message : 'Unknown error'}`
    };
  }
};

export const getPostImpressions = async (userId: string, postId: string) => {
  try {
    const metricsResult = await getPostMetrics(userId, postId);
    if (!metricsResult.success) {
      return metricsResult;
    }

    return {
      success: true,
      postId,
      impressions: metricsResult.metrics?.impressions || 0,
      message: `Post has ${metricsResult.metrics?.impressions || 0} total impressions`
    };
  } catch (error) {
    return {
      success: false,
      message: `Error getting impressions: ${error instanceof Error ? error.message : 'Unknown error'}`
    };
  }
};

export const getPostImpressionsUnique = async (userId: string, postId: string) => {
  try {
    const metricsResult = await getPostMetrics(userId, postId);
    if (!metricsResult.success) {
      return metricsResult;
    }

    return {
      success: true,
      postId,
      uniqueImpressions: metricsResult.metrics?.impressionsUnique || 0,
      message: `Post has ${metricsResult.metrics?.impressionsUnique || 0} unique impressions`
    };
  } catch (error) {
    return {
      success: false,
      message: `Error getting unique impressions: ${error instanceof Error ? error.message : 'Unknown error'}`
    };
  }
};

export const getPostImpressionsPaid = async (userId: string, postId: string) => {
  try {
    const metricsResult = await getPostMetrics(userId, postId);
    if (!metricsResult.success) {
      return metricsResult;
    }

    return {
      success: true,
      postId,
      paidImpressions: metricsResult.metrics?.impressionsPaid || 0,
      message: `Post has ${metricsResult.metrics?.impressionsPaid || 0} paid impressions`
    };
  } catch (error) {
    return {
      success: false,
      message: `Error getting paid impressions: ${error instanceof Error ? error.message : 'Unknown error'}`
    };
  }
};

export const getPostImpressionsOrganic = async (userId: string, postId: string) => {
  try {
    const metricsResult = await getPostMetrics(userId, postId);
    if (!metricsResult.success) {
      return metricsResult;
    }

    return {
      success: true,
      postId,
      organicImpressions: metricsResult.metrics?.impressionsOrganic || 0,
      message: `Post has ${metricsResult.metrics?.impressionsOrganic || 0} organic impressions`
    };
  } catch (error) {
    return {
      success: false,
      message: `Error getting organic impressions: ${error instanceof Error ? error.message : 'Unknown error'}`
    };
  }
};

export const getPostEngagedUsers = async (userId: string, postId: string) => {
  try {
    const metricsResult = await getPostMetrics(userId, postId);
    if (!metricsResult.success) {
      return metricsResult;
    }

    return {
      success: true,
      postId,
      engagedUsers: metricsResult.metrics?.engagedUsers || 0,
      message: `Post has ${metricsResult.metrics?.engagedUsers || 0} engaged users`
    };
  } catch (error) {
    return {
      success: false,
      message: `Error getting engaged users: ${error instanceof Error ? error.message : 'Unknown error'}`
    };
  }
};

export const getPostClicks = async (userId: string, postId: string) => {
  try {
    const metricsResult = await getPostMetrics(userId, postId);
    if (!metricsResult.success) {
      return metricsResult;
    }

    return {
      success: true,
      postId,
      clicks: metricsResult.metrics?.clicks || 0,
      message: `Post has ${metricsResult.metrics?.clicks || 0} clicks`
    };
  } catch (error) {
    return {
      success: false,
      message: `Error getting clicks: ${error instanceof Error ? error.message : 'Unknown error'}`
    };
  }
};

export const getPostReactionsLikeTotal = async (userId: string, postId: string) => {
  try {
    const { userSessionManager } = await import('../config.js');
    const session = userSessionManager.getSession(userId);
    if (!session) {
      throw new Error('User session not found');
    }

    const response = await fetch(
      `https://graph.facebook.com/v23.0/${postId}?fields=reactions.type(LIKE).summary(total_count)&access_token=${session.credentials.facebookAccessToken}`
    );

    const result: any = await response.json();
    
    if (result.error) {
      return { success: false, message: result.error.message };
    }

    const likeCount = result.reactions?.summary?.total_count || 0;

    return {
      success: true,
      postId,
      likeReactions: likeCount,
      message: `Post has ${likeCount} LIKE reactions`
    };
  } catch (error) {
    return {
      success: false,
      message: `Error getting like reactions: ${error instanceof Error ? error.message : 'Unknown error'}`
    };
  }
};

export const getPostShareCount = async (userId: string, postId: string) => {
  try {
    const { userSessionManager } = await import('../config.js');
    const session = userSessionManager.getSession(userId);
    if (!session) {
      throw new Error('User session not found');
    }

    const response = await fetch(
      `https://graph.facebook.com/v23.0/${postId}?fields=shares&access_token=${session.credentials.facebookAccessToken}`
    );

    const result: any = await response.json();
    
    if (result.error) {
      return { success: false, message: result.error.message };
    }

    const shareCount = result.shares?.count || 0;

    return {
      success: true,
      postId,
      shareCount: shareCount,
      message: `Post has ${shareCount} shares`
    };
  } catch (error) {
    return {
      success: false,
      message: `Error getting share count: ${error instanceof Error ? error.message : 'Unknown error'}`
    };
  }
};


// FIXED VERSION - Get number of comments using page access token
export const getCommentsFixed = async (userId: string, postId: string) => {
  try {
    // Extract page ID from post ID (format: pageId_postId)
    const pageId = postId.split('_')[0];
    const pageAccessToken = await getPageAccessToken(userId, pageId);
    if (!pageAccessToken) {
      return { success: false, message: 'Failed to get page access token' };
    }

    const response = await fetch(
      `https://graph.facebook.com/v23.0/${postId}?fields=comments.summary(true)&access_token=${pageAccessToken}`
    );
    const result = await response.json() as FacebookApiResponse;
    
    if (result.error) {
      return { success: false, message: result.error.message };
    }
    
    return {
      success: true,
      postId,
      commentCount: result.comments?.summary?.total_count || 0,
      message: `Post has ${result.comments?.summary?.total_count || 0} comments`
    };
  } catch (error) {
    return {
      success: false,
      message: `Error getting comment count: ${error instanceof Error ? error.message : 'Unknown error'}`
    };
  }
};

// Alias for deleteComment
export const deleteCommentFromPost = deleteComment;

// Alias for deleteComment
export const deleteCommentFromPost = deleteComment;

// Create page post - USES PAGE TOKEN
export const createPagePost = async (
  userId: string,
  pageId: string,
  message: string,
  link?: string,
  scheduledPublishTime?: number
) => {
  try {
    const { userSessionManager } = await import('../config.js');
    const session = userSessionManager.getSession(userId);
    if (!session) {
      return { success: false, message: 'User session not found' };
    }

    const pageAccessToken = await getPageAccessToken(userId, pageId);
    if (!pageAccessToken) {
      return { success: false, message: 'Failed to get page access token' };
    }

    const postData: any = {
      message,
      access_token: pageAccessToken
    };

    if (link) {
      postData.link = link;
    }

    if (scheduledPublishTime) {
      postData.published = false;
      postData.scheduled_publish_time = scheduledPublishTime;
    }

    const response = await fetch(
      `https://graph.facebook.com/v23.0/${pageId}/feed`,
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(postData)
      }
    );

    const result: any = await response.json();
    
    if (result.error) {
      return { success: false, message: result.error.message };
    }

    return {
      success: true,
      postId: result.id,
      message: scheduledPublishTime ? 'Post scheduled successfully' : 'Post created successfully'
    };
  } catch (error) {
    return {
      success: false,
      message: `Error creating page post: ${error instanceof Error ? error.message : 'Unknown error'}`
    };
  }
};

// Get page details - USES USER TOKEN  
export const getPageDetails = async (userId: string, pageId: string) => {
  try {
    const { userSessionManager } = await import('../config.js');
    const session = userSessionManager.getSession(userId);
    if (!session) {
      return { success: false, message: 'User session not found' };
    }

    const response = await fetch(
      `https://graph.facebook.com/v23.0/${pageId}?fields=id,name,category,fan_count,picture,cover,about,description,website,emails,phone&access_token=${session.credentials.facebookAccessToken}`
    );
    
    const data: any = await response.json();
    
    if (data.error) {
      return { success: false, message: data.error.message };
    }

    return {
      success: true,
      page: data,
      message: 'Page details retrieved successfully'
    };
  } catch (error) {
    return {
      success: false,
      message: `Error getting page details: ${error instanceof Error ? error.message : 'Unknown error'}`
    };
  }
};

// Update page post - USES PAGE TOKEN
export const updatePagePost = async (
  userId: string,
  postId: string,
  message: string
) => {
  try {
    const { userSessionManager } = await import('../config.js');
    const session = userSessionManager.getSession(userId);
    if (!session) {
      return { success: false, message: 'User session not found' };
    }

    // Extract page ID from post ID
    const pageId = postId.includes('_') ? postId.split('_')[0] : '';
    if (!pageId) {
      return { success: false, message: 'Invalid post ID format' };
    }

    const pageAccessToken = await getPageAccessToken(userId, pageId);
    if (!pageAccessToken) {
      return { success: false, message: 'Failed to get page access token' };
    }

    const response = await fetch(
      `https://graph.facebook.com/v23.0/${postId}`,
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },        body: JSON.stringify({
          message,
          access_token: pageAccessToken
        })
      }
    );

    const result: any = await response.json();
    
    if (result.error) {
      return { success: false, message: result.error.message };
    }

    return {
      success: true,
      message: 'Post updated successfully'
    };
  } catch (error) {
    return {
      success: false,
      message: `Error updating page post: ${error instanceof Error ? error.message : 'Unknown error'}`
    };
  }
};

// Delete page post - USES USER TOKEN
export const deletePagePost = async (userId: string, postId: string) => {
  try {
    const { userSessionManager } = await import('../config.js');
    const session = userSessionManager.getSession(userId);    if (!session) {
      return { success: false, message: 'User session not found' };
    }

    const response = await fetch(
      `https://graph.facebook.com/v23.0/${postId}?access_token=${session.credentials.facebookAccessToken}`,
      {
        method: 'DELETE'
      }
    );

    const result: any = await response.json();
    
    if (result.error) {
      return { success: false, message: result.error.message };
    }

    return {
      success: true,
      message: 'Post deleted successfully'
    };
  } catch (error) {
    return {
      success: false,
      message: `Error deleting page post: ${error instanceof Error ? error.message : 'Unknown error'}`
    };
  }
};

// Get page posts - USES USER TOKEN
export const getPagePosts = async (
  userId: string,
  pageId: string,
  limit: number = 25
) => {
  try {
    const { userSessionManager } = await import('../config.js');
    const session = userSessionManager.getSession(userId);
    if (!session) {
      return { success: false, message: 'User session not found' };
    }

    const response = await fetch(
      `https://graph.facebook.com/v23.0/${pageId}/posts?fields=id,message,created_time,permalink_url,shares,reactions.summary(true),comments.summary(true)&limit=${limit}&access_token=${session.credentials.facebookAccessToken}`
    );
    
    const data: any = await response.json();
    
    if (data.error) {
      return { success: false, message: data.error.message };
    }

    return {
      success: true,
      posts: data.data || [],
      paging: data.paging,
      message: `Retrieved ${data.data?.length || 0} posts`
    };
  } catch (error) {
    return {
      success: false,
      message: `Error getting page posts: ${error instanceof Error ? error.message : 'Unknown error'}`
    };
  }
};

// Get page insights - USES USER TOKEN
export const getPageInsights = async (
  userId: string,
  pageId: string,
  metrics: string[] = ['page_views_total', 'page_fan_count', 'page_engaged_users'],
  period: string = 'day'
) => {
  try {
    const { userSessionManager } = await import('../config.js');
    const session = userSessionManager.getSession(userId);
    if (!session) {
      return { success: false, message: 'User session not found' };
    }

    const metricsString = metrics.join(',');
    const response = await fetch(
      `https://graph.facebook.com/v23.0/${pageId}/insights?metric=${metricsString}&period=${period}&access_token=${session.credentials.facebookAccessToken}`
    );
    
    const data: any = await response.json();
    
    if (data.error) {
      return { success: false, message: data.error.message };
    }
    return {
      success: true,
      insights: data.data || [],
      message: 'Page insights retrieved successfully'
    };
  } catch (error) {
    return {
      success: false,
      message: `Error getting page insights: ${error instanceof Error ? error.message : 'Unknown error'}`
    };
  }
};

// Schedule a page post - USES PAGE TOKEN (handled by createPagePost)
export const schedulePagePost = async (
  userId: string,
  pageId: string,
  message: string,
  scheduledPublishTime: number,
  link?: string
) => {
  return createPagePost(userId, pageId, message, link, scheduledPublishTime);
};

// Get scheduled posts - USES USER TOKEN
export const getScheduledPosts = async (
  userId: string,
  pageId: string
) => {
  try {    const { userSessionManager } = await import('../config.js');
    const session = userSessionManager.getSession(userId);
    if (!session) {
      return { success: false, message: 'User session not found' };
    }

    const response = await fetch(
      `https://graph.facebook.com/v23.0/${pageId}/scheduled_posts?fields=id,message,scheduled_publish_time&access_token=${session.credentials.facebookAccessToken}`
    );
    
    const data: any = await response.json();
    
    if (data.error) {
      return { success: false, message: data.error.message };
    }

    return {
      success: true,
      scheduledPosts: data.data || [],
      message: `Found ${data.data?.length || 0} scheduled posts`
    };
  } catch (error) {
    return {
      success: false,
      message: `Error getting scheduled posts: ${error instanceof Error ? error.message : 'Unknown error'}`
    };
  }
};

// Publish scheduled post - USES PAGE TOKEN
export const publishScheduledPost = async (
  userId: string,
  postId: string
) => {
  try {
    const { userSessionManager } = await import('../config.js');
    const session = userSessionManager.getSession(userId);
    if (!session) {
      return { success: false, message: 'User session not found' };
    }

    // Extract page ID from post ID
    const pageId = postId.includes('_') ? postId.split('_')[0] : '';
    if (!pageId) {
      return { success: false, message: 'Invalid post ID format' };
    }

    const pageAccessToken = await getPageAccessToken(userId, pageId);
    if (!pageAccessToken) {
      return { success: false, message: 'Failed to get page access token' };
    }

    const response = await fetch(
      `https://graph.facebook.com/v23.0/${postId}`,
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({          is_published: true,
          access_token: pageAccessToken
        })
      }
    );

    const result: any = await response.json();
    
    if (result.error) {
      return { success: false, message: result.error.message };
    }

    return {
      success: true,
      message: 'Scheduled post published successfully'
    };
  } catch (error) {
    return {
      success: false,
      message: `Error publishing scheduled post: ${error instanceof Error ? error.message : 'Unknown error'}`
    };
  }
};

// Cancel scheduled post - USES PAGE TOKEN
export const cancelScheduledPost = async (
  userId: string,
  postId: string
) => {
  try {    const { userSessionManager } = await import('../config.js');
    const session = userSessionManager.getSession(userId);
    if (!session) {
      return { success: false, message: 'User session not found' };
    }

    // Extract page ID from post ID
    const pageId = postId.includes('_') ? postId.split('_')[0] : '';
    if (!pageId) {
      return { success: false, message: 'Invalid post ID format' };
    }

    const pageAccessToken = await getPageAccessToken(userId, pageId);
    if (!pageAccessToken) {
      return { success: false, message: 'Failed to get page access token' };
    }

    const response = await fetch(
      `https://graph.facebook.com/v23.0/${postId}?access_token=${pageAccessToken}`,
      {
        method: 'DELETE'
      }
    );

    const result: any = await response.json();
    
    if (result.error) {
      return { success: false, message: result.error.message };
    }
    return {
      success: true,
      message: 'Scheduled post cancelled successfully'
    };
  } catch (error) {
    return {
      success: false,
      message: `Error cancelling scheduled post: ${error instanceof Error ? error.message : 'Unknown error'}`
    };
  }
};

// Get page videos - USES USER TOKEN
export const getPageVideos = async (
  userId: string,
  pageId: string,
  limit: number = 25
) => {
  try {
    const { userSessionManager } = await import('../config.js');
    const session = userSessionManager.getSession(userId);
    if (!session) {
      return { success: false, message: 'User session not found' };
    }

    const response = await fetch(
      `https://graph.facebook.com/v23.0/${pageId}/videos?fields=id,title,description,source,permalink_url,created_time&limit=${limit}&access_token=${session.credentials.facebookAccessToken}`
    );
        const data: any = await response.json();
    
    if (data.error) {
      return { success: false, message: data.error.message };
    }

    return {
      success: true,
      videos: data.data || [],
      paging: data.paging,
      message: `Retrieved ${data.data?.length || 0} videos`
    };
  } catch (error) {
    return {
      success: false,
      message: `Error getting page videos: ${error instanceof Error ? error.message : 'Unknown error'}`
    };
  }
};

// Upload page video - USES PAGE TOKEN
export const uploadPageVideo = async (
  userId: string,
  pageId: string,
  videoUrl: string,
  title?: string,
  description?: string
) => {
  try {
    const { userSessionManager } = await import('../config.js');    const session = userSessionManager.getSession(userId);
    if (!session) {
      return { success: false, message: 'User session not found' };
    }

    const pageAccessToken = await getPageAccessToken(userId, pageId);
    if (!pageAccessToken) {
      return { success: false, message: 'Failed to get page access token' };
    }

    const videoData: any = {
      file_url: videoUrl,
      access_token: pageAccessToken
    };

    if (title) {
      videoData.title = title;
    }

    if (description) {
      videoData.description = description;
    }

    const response = await fetch(
      `https://graph.facebook.com/v23.0/${pageId}/videos`,
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },        body: JSON.stringify(videoData)
      }
    );

    const result: any = await response.json();
    
    if (result.error) {
      return { success: false, message: result.error.message };
    }

    return {
      success: true,
      videoId: result.id,
      message: 'Video uploaded successfully'
    };
  } catch (error) {
    return {
      success: false,
      message: `Error uploading video: ${error instanceof Error ? error.message : 'Unknown error'}`
    };
  }
};

// Get page events - USES USER TOKEN  
export const getPageEvents = async (
  userId: string,
  pageId: string,
  timeFilter: string = 'upcoming'
) => {
  try {
    const { userSessionManager } = await import('../config.js');    const session = userSessionManager.getSession(userId);
    if (!session) {
      return { success: false, message: 'User session not found' };
    }

    const response = await fetch(
      `https://graph.facebook.com/v23.0/${pageId}/events?time_filter=${timeFilter}&fields=id,name,description,start_time,end_time,place,cover&access_token=${session.credentials.facebookAccessToken}`
    );
    
    const data: any = await response.json();
    
    if (data.error) {
      return { success: false, message: data.error.message };
    }

    return {
      success: true,
      events: data.data || [],
      message: `Retrieved ${data.data?.length || 0} ${timeFilter} events`
    };
  } catch (error) {
    return {
      success: false,
      message: `Error getting page events: ${error instanceof Error ? error.message : 'Unknown error'}`
    };
  }
};

// Create page event - USES PAGE TOKEN
export const createPageEvent = async (  userId: string,
  pageId: string,
  name: string,
  startTime: string,
  description?: string,
  endTime?: string,
  locationName?: string
) => {
  try {
    const { userSessionManager } = await import('../config.js');
    const session = userSessionManager.getSession(userId);
    if (!session) {
      return { success: false, message: 'User session not found' };
    }

    const pageAccessToken = await getPageAccessToken(userId, pageId);
    if (!pageAccessToken) {
      return { success: false, message: 'Failed to get page access token' };
    }

    const eventData: any = {
      name,
      start_time: startTime,
      access_token: pageAccessToken
    };

    if (description) eventData.description = description;
    if (endTime) eventData.end_time = endTime;
    if (locationName) eventData.location = locationName;
    const response = await fetch(
      `https://graph.facebook.com/v23.0/${pageId}/events`,
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(eventData)
      }
    );

    const result: any = await response.json();
    
    if (result.error) {
      return { success: false, message: result.error.message };
    }

    return {
      success: true,
      eventId: result.id,
      message: 'Event created successfully'
    };
  } catch (error) {
    return {
      success: false,
      message: `Error creating event: ${error instanceof Error ? error.message : 'Unknown error'}`
    };
  }
};
// Update page event - USES USER TOKEN
export const updatePageEvent = async (
  userId: string,
  eventId: string,
  updateData: any
) => {
  try {
    const { userSessionManager } = await import('../config.js');
    const session = userSessionManager.getSession(userId);
    if (!session) {
      return { success: false, message: 'User session not found' };
    }

    const response = await fetch(
      `https://graph.facebook.com/v23.0/${eventId}`,
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          ...updateData,
          access_token: session.credentials.facebookAccessToken
        })
      }
    );

    const result: any = await response.json();
        if (result.error) {
      return { success: false, message: result.error.message };
    }

    return {
      success: true,
      message: 'Event updated successfully'
    };
  } catch (error) {
    return {
      success: false,
      message: `Error updating event: ${error instanceof Error ? error.message : 'Unknown error'}`
    };
  }
};

// Delete page event - USES USER TOKEN
export const deletePageEvent = async (
  userId: string,
  eventId: string
) => {
  try {
    const { userSessionManager } = await import('../config.js');
    const session = userSessionManager.getSession(userId);
    if (!session) {
      return { success: false, message: 'User session not found' };
    }

    const response = await fetch(
      `https://graph.facebook.com/v23.0/${eventId}?access_token=${session.credentials.facebookAccessToken}`,      {
        method: 'DELETE'
      }
    );

    const result: any = await response.json();
    
    if (result.error) {
      return { success: false, message: result.error.message };
    }

    return {
      success: true,
      message: 'Event deleted successfully'
    };
  } catch (error) {
    return {
      success: false,
      message: `Error deleting event: ${error instanceof Error ? error.message : 'Unknown error'}`
    };
  }
};

// Get page fan count - USES USER TOKEN
export const getPageFanCount = async (
  userId: string,
  pageId: string
) => {
  try {
    const { userSessionManager } = await import('../config.js');
    const session = userSessionManager.getSession(userId);    if (!session) {
      return { success: false, message: 'User session not found' };
    }

    const response = await fetch(
      `https://graph.facebook.com/v23.0/${pageId}?fields=fan_count&access_token=${session.credentials.facebookAccessToken}`
    );
    
    const data: any = await response.json();
    
    if (data.error) {
      return { success: false, message: data.error.message };
    }

    return {
      success: true,
      fanCount: data.fan_count || 0,
      message: 'Fan count retrieved successfully'
    };
  } catch (error) {
    return {
      success: false,
      message: `Error getting fan count: ${error instanceof Error ? error.message : 'Unknown error'}`
    };
  }
};

// Reply to comment - USES PAGE TOKEN
export const replyToComment = async (  userId: string,
  commentId: string,
  message: string
) => {
  try {
    const { userSessionManager } = await import('../config.js');
    const session = userSessionManager.getSession(userId);
    if (!session) {
      return { success: false, message: 'User session not found' };
    }

    // Try to extract page ID from comment ID pattern
    let pageId = '';
    if (commentId.includes('_')) {
      const parts = commentId.split('_');
      pageId = parts[0];
    }

    if (!pageId) {
      // If no page ID found, we need to fetch the comment details first
      const commentResponse = await fetch(
        `https://graph.facebook.com/v23.0/${commentId}?fields=parent&access_token=${session.credentials.facebookAccessToken}`
      );
      const commentData: any = await commentResponse.json();
      
      if (commentData.parent && commentData.parent.id) {
        pageId = commentData.parent.id.split('_')[0];
      }
    }
    if (!pageId) {
      return { success: false, message: 'Could not determine page ID for comment' };
    }

    const pageAccessToken = await getPageAccessToken(userId, pageId);
    if (!pageAccessToken) {
      return { success: false, message: 'Failed to get page access token' };
    }

    const response = await fetch(
      `https://graph.facebook.com/v23.0/${commentId}/comments`,
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          message,
          access_token: pageAccessToken
        })
      }
    );

    const result: any = await response.json();
    
    if (result.error) {
      return { success: false, message: result.error.message };
    }
    return {
      success: true,
      replyId: result.id,
      message: 'Reply posted successfully'
    };
  } catch (error) {
    return {
      success: false,
      message: `Error replying to comment: ${error instanceof Error ? error.message : 'Unknown error'}`
    };
  }
};

// Get post comments - USES USER TOKEN
export const getPostComments = async (
  userId: string,
  postId: string,
  limit: number = 25
) => {
  try {
    const { userSessionManager } = await import('../config.js');
    const session = userSessionManager.getSession(userId);
    if (!session) {
      return { success: false, message: 'User session not found' };
    }

    const response = await fetch(
      `https://graph.facebook.com/v23.0/${postId}/comments?fields=id,message,from,created_time,like_count,comment_count&limit=${limit}&access_token=${session.credentials.facebookAccessToken}`
    );    
    const data: any = await response.json();
    
    if (data.error) {
      return { success: false, message: data.error.message };
    }

    return {
      success: true,
      comments: data.data || [],
      paging: data.paging,
      message: `Retrieved ${data.data?.length || 0} comments`
    };
  } catch (error) {
    return {
      success: false,
      message: `Error getting comments: ${error instanceof Error ? error.message : 'Unknown error'}`
    };
  }
};

// Delete comment - USES PAGE TOKEN
export const deleteComment = async (
  userId: string,
  commentId: string
) => {
  try {
    const { userSessionManager } = await import('../config.js');
    const session = userSessionManager.getSession(userId);
    if (!session) {      return { success: false, message: 'User session not found' };
    }

    // Try to extract page ID from comment ID pattern
    let pageId = '';
    if (commentId.includes('_')) {
      const parts = commentId.split('_');
      pageId = parts[0];
    }

    if (!pageId) {
      // If no page ID found, we need to fetch the comment details first
      const commentResponse = await fetch(
        `https://graph.facebook.com/v23.0/${commentId}?fields=parent&access_token=${session.credentials.facebookAccessToken}`
      );
      const commentData: any = await commentResponse.json();
      
      if (commentData.parent && commentData.parent.id) {
        pageId = commentData.parent.id.split('_')[0];
      }
    }

    if (!pageId) {
      return { success: false, message: 'Could not determine page ID for comment' };
    }

    const pageAccessToken = await getPageAccessToken(userId, pageId);
    if (!pageAccessToken) {
      return { success: false, message: 'Failed to get page access token' };
    }
    const response = await fetch(
      `https://graph.facebook.com/v23.0/${commentId}?access_token=${pageAccessToken}`,
      {
        method: 'DELETE'
      }
    );

    const result: any = await response.json();
    
    if (result.error) {
      return { success: false, message: result.error.message };
    }

    return {
      success: true,
      message: 'Comment deleted successfully'
    };
  } catch (error) {
    return {
      success: false,
      message: `Error deleting comment: ${error instanceof Error ? error.message : 'Unknown error'}`
    };
  }
};

// Alias for deleteComment
export const deleteCommentFromPost = deleteComment;

// Filter negative comments - USES USER TOKEN
export const filterNegativeComments = async (  userId: string,
  postId: string,
  keywords: string[] = ['spam', 'scam', 'fake', 'bad', 'terrible', 'worst', 'hate']
) => {
  try {
    const result = await getPostComments(userId, postId, 100);
    
    if (!result.success) {
      return result;
    }

    const negativeComments = result.comments.filter((comment: any) => {
      const messageText = comment.message.toLowerCase();
      return keywords.some(keyword => messageText.includes(keyword.toLowerCase()));
    });

    return {
      success: true,
      negativeComments,
      totalComments: result.comments.length,
      negativeCount: negativeComments.length,
      message: `Found ${negativeComments.length} potentially negative comments out of ${result.comments.length} total`
    };
  } catch (error) {
    return {
      success: false,
      message: `Error filtering comments: ${error instanceof Error ? error.message : 'Unknown error'}`
    };
  }
};
// Get number of comments - USES USER TOKEN
export const getNumberOfComments = async (userId: string, postId: string) => {
  try {
    const { userSessionManager } = await import('../config.js');
    const session = userSessionManager.getSession(userId);
    if (!session) {
      return { success: false, message: 'User session not found' };
    }

    const response = await fetch(
      `https://graph.facebook.com/v23.0/${postId}?fields=comments.summary(true)&access_token=${session.credentials.facebookAccessToken}`
    );
    
    const data: any = await response.json();
    
    if (data.error) {
      return { success: false, message: data.error.message };
    }

    const commentCount = data.comments?.summary?.total_count || 0;

    return {
      success: true,
      commentCount,
      message: `Post has ${commentCount} comments`
    };
  } catch (error) {
    return {
      success: false,      message: `Error getting comment count: ${error instanceof Error ? error.message : 'Unknown error'}`
    };
  }
};

// Get number of likes - USES USER TOKEN
export const getNumberOfLikes = async (userId: string, postId: string) => {
  try {
    const { userSessionManager } = await import('../config.js');
    const session = userSessionManager.getSession(userId);
    if (!session) {
      return { success: false, message: 'User session not found' };
    }

    const response = await fetch(
      `https://graph.facebook.com/v23.0/${postId}?fields=reactions.summary(true)&access_token=${session.credentials.facebookAccessToken}`
    );
    
    const data: any = await response.json();
    
    if (data.error) {
      return { success: false, message: data.error.message };
    }

    const likeCount = data.reactions?.summary?.total_count || 0;

    return {
      success: true,
      likeCount,
      message: `Post has ${likeCount} reactions`    };
  } catch (error) {
    return {
      success: false,
      message: `Error getting like count: ${error instanceof Error ? error.message : 'Unknown error'}`
    };
  }
};

// Get post impressions - USES PAGE TOKEN  
export const getPostImpressions = async (userId: string, postId: string) => {
  try {
    const { userSessionManager } = await import('../config.js');
    const session = userSessionManager.getSession(userId);
    if (!session) {
      return { success: false, message: 'User session not found' };
    }

    // Extract page ID from post ID
    const pageId = postId.includes('_') ? postId.split('_')[0] : '';
    if (!pageId) {
      return { success: false, message: 'Invalid post ID format' };
    }

    const pageAccessToken = await getPageAccessToken(userId, pageId);
    if (!pageAccessToken) {
      return { success: false, message: 'Failed to get page access token' };
    }

    const response = await fetch(      `https://graph.facebook.com/v23.0/${postId}/insights?metric=post_impressions&access_token=${pageAccessToken}`
    );
    
    const data: any = await response.json();
    
    if (data.error) {
      return { success: false, message: data.error.message };
    }

    const impressions = data.data?.[0]?.values?.[0]?.value || 0;

    return {
      success: true,
      impressions,
      message: `Post has ${impressions} impressions`
    };
  } catch (error) {
    return {
      success: false,
      message: `Error getting impressions: ${error instanceof Error ? error.message : 'Unknown error'}`
    };
  }
};

// Get post metrics helper - USES USER TOKEN (but needs PAGE TOKEN for insights)
export const getPostMetrics = async (userId: string, postId: string) => {
  try {
    const { userSessionManager } = await import('../config.js');
    const session = userSessionManager.getSession(userId);
    if (!session) {      return { success: false, message: 'User session not found' };
    }

    // For insights, we need page token
    const pageId = postId.includes('_') ? postId.split('_')[0] : '';
    if (!pageId) {
      return { success: false, message: 'Invalid post ID format' };
    }

    const pageAccessToken = await getPageAccessToken(userId, pageId);
    if (!pageAccessToken) {
      return { success: false, message: 'Failed to get page access token' };
    }

    const response = await fetch(
      `https://graph.facebook.com/v23.0/${postId}?fields=reactions.summary(true),comments.summary(true),shares,insights.metric(post_impressions,post_impressions_unique,post_impressions_paid,post_impressions_organic,post_engaged_users,post_clicks)&access_token=${pageAccessToken}`
    );

    const result: any = await response.json();
    
    if (result.error) {
      return { success: false, message: result.error.message };
    }

    // Extract insights data
    const insights: any = {};
    if (result.insights?.data) {
      result.insights.data.forEach((metric: any) => {
        insights[metric.name] = metric.values?.[0]?.value || 0;
      });
    }
    return {
      success: true,
      postId,
      metrics: {
        likes: result.reactions?.summary?.total_count || 0,
        comments: result.comments?.summary?.total_count || 0,
        shares: result.shares?.count || 0,
        impressions: insights.post_impressions || 0,
        impressionsUnique: insights.post_impressions_unique || 0,
        impressionsPaid: insights.post_impressions_paid || 0,
        impressionsOrganic: insights.post_impressions_organic || 0,
        engagedUsers: insights.post_engaged_users || 0,
        clicks: insights.post_clicks || 0
      },
      message: 'Post metrics retrieved successfully'
    };
  } catch (error) {
    return {
      success: false,
      message: `Error getting post metrics: ${error instanceof Error ? error.message : 'Unknown error'}`
    };
  }
};

// Get post impressions unique - USES PAGE TOKEN (via getPostMetrics)
export const getPostImpressionsUnique = async (userId: string, postId: string) => {
  try {
    const metricsResult = await getPostMetrics(userId, postId);
    if (!metricsResult.success) {      return metricsResult;
    }

    return {
      success: true,
      postId,
      uniqueImpressions: metricsResult.metrics?.impressionsUnique || 0,
      message: `Post has ${metricsResult.metrics?.impressionsUnique || 0} unique impressions`
    };
  } catch (error) {
    return {
      success: false,
      message: `Error getting unique impressions: ${error instanceof Error ? error.message : 'Unknown error'}`
    };
  }
};

// Get post impressions paid - USES PAGE TOKEN (via getPostMetrics)
export const getPostImpressionsPaid = async (userId: string, postId: string) => {
  try {
    const metricsResult = await getPostMetrics(userId, postId);
    if (!metricsResult.success) {
      return metricsResult;
    }

    return {
      success: true,
      postId,
      paidImpressions: metricsResult.metrics?.impressionsPaid || 0,
      message: `Post has ${metricsResult.metrics?.impressionsPaid || 0} paid impressions`    };
  } catch (error) {
    return {
      success: false,
      message: `Error getting paid impressions: ${error instanceof Error ? error.message : 'Unknown error'}`
    };
  }
};

// Get post impressions organic - USES PAGE TOKEN (via getPostMetrics)
export const getPostImpressionsOrganic = async (userId: string, postId: string) => {
  try {
    const metricsResult = await getPostMetrics(userId, postId);
    if (!metricsResult.success) {
      return metricsResult;
    }

    return {
      success: true,
      postId,
      organicImpressions: metricsResult.metrics?.impressionsOrganic || 0,
      message: `Post has ${metricsResult.metrics?.impressionsOrganic || 0} organic impressions`
    };
  } catch (error) {
    return {
      success: false,
      message: `Error getting organic impressions: ${error instanceof Error ? error.message : 'Unknown error'}`
    };
  }
};
// Get post engaged users - USES PAGE TOKEN (via getPostMetrics)
export const getPostEngagedUsers = async (userId: string, postId: string) => {
  try {
    const metricsResult = await getPostMetrics(userId, postId);
    if (!metricsResult.success) {
      return metricsResult;
    }

    return {
      success: true,
      postId,
      engagedUsers: metricsResult.metrics?.engagedUsers || 0,
      message: `Post has ${metricsResult.metrics?.engagedUsers || 0} engaged users`
    };
  } catch (error) {
    return {
      success: false,
      message: `Error getting engaged users: ${error instanceof Error ? error.message : 'Unknown error'}`
    };
  }
};

// Get post clicks - USES PAGE TOKEN (via getPostMetrics)
export const getPostClicks = async (userId: string, postId: string) => {
  try {
    const metricsResult = await getPostMetrics(userId, postId);
    if (!metricsResult.success) {
      return metricsResult;
    }
    return {
      success: true,
      postId,
      clicks: metricsResult.metrics?.clicks || 0,
      message: `Post has ${metricsResult.metrics?.clicks || 0} clicks`
    };
  } catch (error) {
    return {
      success: false,
      message: `Error getting post clicks: ${error instanceof Error ? error.message : 'Unknown error'}`
    };
  }
};

// Get post reactions like total - USES USER TOKEN
export const getPostReactionsLikeTotal = async (userId: string, postId: string) => {
  try {
    const { userSessionManager } = await import('../config.js');
    const session = userSessionManager.getSession(userId);
    if (!session) {
      return { success: false, message: 'User session not found' };
    }

    const response = await fetch(
      `https://graph.facebook.com/v23.0/${postId}?fields=reactions.type(LIKE).summary(true)&access_token=${session.credentials.facebookAccessToken}`
    );
    
    const data: any = await response.json();
        if (data.error) {
      return { success: false, message: data.error.message };
    }

    const likeCount = data.reactions?.summary?.total_count || 0;

    return {
      success: true,
      postId,
      likeReactions: likeCount,
      message: `Post has ${likeCount} LIKE reactions`
    };
  } catch (error) {
    return {
      success: false,
      message: `Error getting like reactions: ${error instanceof Error ? error.message : 'Unknown error'}`
    };
  }
};

// Get post top commenters - USES USER TOKEN
export const getPostTopCommenters = async (
  userId: string,
  postId: string,
  limit: number = 10
) => {
  try {
    const result = await getPostComments(userId, postId, 100);
    
    if (!result.success) {      return result;
    }

    // Count comments by user
    const commenterCounts: { [key: string]: { name: string; count: number; id: string } } = {};
    
    result.comments.forEach((comment: any) => {
      const userId = comment.from?.id;
      const userName = comment.from?.name || 'Unknown User';
      
      if (userId) {
        if (!commenterCounts[userId]) {
          commenterCounts[userId] = { name: userName, count: 0, id: userId };
        }
        commenterCounts[userId].count++;
      }
    });

    // Sort by count and get top commenters
    const topCommenters = Object.values(commenterCounts)
      .sort((a, b) => b.count - a.count)
      .slice(0, limit);

    return {
      success: true,
      topCommenters,
      totalCommenters: Object.keys(commenterCounts).length,
      message: `Found ${topCommenters.length} top commenters`
    };
  } catch (error) {    return {
      success: false,
      message: `Error getting top commenters: ${error instanceof Error ? error.message : 'Unknown error'}`
    };
  }
};

// Post image to Facebook - USES PAGE TOKEN
export const postImageToFacebook = async (
  userId: string,
  pageId: string,
  imageUrl: string,
  caption?: string
) => {
  try {
    const { userSessionManager } = await import('../config.js');
    const session = userSessionManager.getSession(userId);
    if (!session) {
      return { success: false, message: 'User session not found' };
    }

    const pageAccessToken = await getPageAccessToken(userId, pageId);
    if (!pageAccessToken) {
      return { success: false, message: 'Failed to get page access token' };
    }

    const photoData: any = {
      url: imageUrl,
      access_token: pageAccessToken
    };
    if (caption) {
      photoData.caption = caption;
    }

    const response = await fetch(
      `https://graph.facebook.com/v23.0/${pageId}/photos`,
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(photoData)
      }
    );

    const result: any = await response.json();
    
    if (result.error) {
      return { success: false, message: result.error.message };
    }

    return {
      success: true,
      photoId: result.id,
      postId: result.post_id,
      message: 'Image posted successfully'
    };
  } catch (error) {
    return {
      success: false,      message: `Error posting image: ${error instanceof Error ? error.message : 'Unknown error'}`
    };
  }
};

// Get post share count - USES USER TOKEN
export const getPostShareCount = async (userId: string, postId: string) => {
  try {
    const { userSessionManager } = await import('../config.js');
    const session = userSessionManager.getSession(userId);
    if (!session) {
      return { success: false, message: 'User session not found' };
    }

    const response = await fetch(
      `https://graph.facebook.com/v23.0/${postId}?fields=shares&access_token=${session.credentials.facebookAccessToken}`
    );
    
    const data: any = await response.json();
    
    if (data.error) {
      return { success: false, message: data.error.message };
    }

    const shareCount = data.shares?.count || 0;

    return {
      success: true,
      postId,
      shareCount,Manager } = await import('../config.js');
    const session = userSessionManager.getSession(userId);
    if (!session) {
      return { success: false, message: 'User session not found' };
    }

    const pageAccessToken = await getPageAccessToken(userId, pageId);
    if (!pageAccessToken) {
      return { success: false, message: 'Failed to get page access token' };
    }

    const response = await fetch(
      `https://graph.facebook.com/v23.0/me/messages`,
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          recipient: { id: recipientId },
          message: { text: message },
          access_token: pageAccessToken
        })
      }
    );

    const result: any = await response.json();
    
    if (result.error) {
      return { success: false, message: result.error.message };
    }
    return {
      success: true,
      recipientId: result.recipient_id,
      messageId: result.message_id,
      message: 'DM sent successfully'
    };
  } catch (error) {
    return {
      success: false,
      message: `Error sending DM: ${error instanceof Error ? error.message : 'Unknown error'}`
    };
  }
};